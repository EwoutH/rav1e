name: rav1e

on:
  push:
  pull_request:

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
         - conf: cargo-build
           target: x86_64-pc-windows-msvc
         - conf: cargo-build
           target: aarch64-pc-windows-msvc
         - conf: cargo-test
           target: x86_64-pc-windows-msvc
         - conf: cargo-c
           target: x86_64-pc-windows-gnu

    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: C:\sccache

    if: >-
     (github.event_name == 'push' && !endsWith(github.event.head_commit.message, 'CI: skip')) ||
     (github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.names, 'skip-ci'))

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install sccache
      run: |
        $LINK = "https://github.com/mozilla/sccache/releases/download/0.2.12"
        $SCCACHE_FILE = "sccache-0.2.12-x86_64-pc-windows-msvc"
        curl -LO "$LINK/$SCCACHE_FILE.tar.gz"
        tar xzf "$SCCACHE_FILE.tar.gz"
        echo "$Env:GITHUB_WORKSPACE/$SCCACHE_FILE" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Install nasm
      run: |
        $NASM_VERSION="2.15.05"
        $LINK = "https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64"
        $NASM_FILE = "nasm-$NASM_VERSION-win64"
        curl --ssl-no-revoke -LO "$LINK/$NASM_FILE.zip"
        7z e -y "$NASM_FILE.zip" -o"C:\nasm"
        echo "C:\nasm"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set MSVC x86_64 linker path
      if: matrix.target != 'aarch64-pc-windows-msvc'
      run: |
        $LinkGlob = "VC\Tools\MSVC\*\bin\Hostx64\x64"
        $LinkPath = vswhere -latest -products * -find "$LinkGlob" |
                    Select-Object -Last 1
        echo "$LinkPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Set MSVC Arm64 linker path
      if: matrix.target == 'aarch64-pc-windows-msvc'
      run: |
        $LinkGlob = "VC\Tools\MSVC\*\bin\Hostx64\Arm64"
        $LinkPath = vswhere -latest -products * -find "$LinkGlob" |
                    Select-Object -Last 1
        echo "$LinkPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install ${{ matrix.toolchain }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        default: true
    - name: Install cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        $LINK = "https://github.com/lu-zero/cargo-c/releases/download/v0.7.2"
        $CARGO_C_FILE = "cargo-c-windows-msvc"
        curl -LO "$LINK/$CARGO_C_FILE.zip"
        7z e -y "$CARGO_C_FILE.zip" -o"${env:USERPROFILE}\.cargo\bin"
    - name: Generate Cargo.lock and Cargo.version
      run: |
        cargo update
        cargo --version > Cargo.version
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: ~/.cargo/registry/cache
        key: ${{ runner.os }}-${{ matrix.conf }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-${{ matrix.target }}-cargo-registry-
    - name: Cache sccache output
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: C:\sccache
        key: ${{ runner.os }}-${{ matrix.conf }}-${{ matrix.target }}-sccache-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-${{ matrix.target }}-sccache-
    - name: Start sccache server
      run: |
        sccache --start-server
    - name: Build
      if: matrix.conf == 'cargo-build'
      run: |
        cargo build --release
    - name: Test
      if: matrix.conf == 'cargo-test'
      run: |
        cargo test --workspace --verbose
    - name: Run cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        cargo cbuild
    - name: Stop sccache server
      run: |
        sccache --stop-server
